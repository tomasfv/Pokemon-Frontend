[{"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\index.js":"1","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\App.js":"2","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\reportWebVitals.js":"3","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\store\\index.js":"4","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\reducer\\index.js":"5","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\LandingPage.jsx":"6","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\Home.jsx":"7","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\Card.jsx":"8","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\actions\\index.js":"9","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\Paginado.jsx":"10","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\SearchBar.jsx":"11","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\PokemonCreate.jsx":"12","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\PokemonDetail.jsx":"13"},{"size":821,"mtime":1669999562518,"results":"14","hashOfConfig":"15"},{"size":687,"mtime":1660824798365,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1653672168000,"results":"17","hashOfConfig":"15"},{"size":490,"mtime":1661956458490,"results":"18","hashOfConfig":"15"},{"size":5184,"mtime":1662032689802,"results":"19","hashOfConfig":"15"},{"size":1078,"mtime":1667057723271,"results":"20","hashOfConfig":"15"},{"size":8797,"mtime":1667057484327,"results":"21","hashOfConfig":"15"},{"size":386,"mtime":1662039939608,"results":"22","hashOfConfig":"15"},{"size":4501,"mtime":1669999596160,"results":"23","hashOfConfig":"15"},{"size":990,"mtime":1663103994518,"results":"24","hashOfConfig":"15"},{"size":1560,"mtime":1665060588764,"results":"25","hashOfConfig":"15"},{"size":11107,"mtime":1667047761598,"results":"26","hashOfConfig":"15"},{"size":2984,"mtime":1667057186732,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rry4j1",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\index.js",["60"],"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\App.js",[],["61","62"],"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\reportWebVitals.js",[],"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\store\\index.js",[],"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\reducer\\index.js",[],"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\LandingPage.jsx",["63"],"import React from 'react';\r\nimport \"./LandingPage.css\";\r\nimport { Link } from 'react-router-dom';\r\nimport { getPokemons, getTypes } from '../actions';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PokeballSpinning from '../Imagenes/PokeballSpinning.gif'\r\n\r\n\r\nexport default function LandingPage(){\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect (() =>{ \r\n        dispatch(getPokemons());\r\n        dispatch(getTypes());\r\n    });\r\n\r\n    return(\r\n\r\n        <div className='landing-container'>\r\n            <div className='text-container'>\r\n                <div className='landing-text'>\r\n                     <h1>WELCOME</h1>\r\n                </div>\r\n                <div>\r\n                    <Link to ='/home'>\r\n                        <button className='landing-button'>HOME</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <div className='landing-img'>\r\n                <img src={PokeballSpinning}></img>\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n        \r\n    )\r\n}","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\Home.jsx",["64","65","66","67","68","69"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getPokemons, filterCreated, orderByName, filterType, getTypes, orderByAttack} from '../actions';\r\nimport { Link } from 'react-router-dom';\r\nimport Card from './Card';\r\nimport Paginado from './Paginado';\r\nimport SearchBar from './SearchBar';\r\nimport PikachuGif from '../Imagenes/PikachuGif.gif'\r\nimport PokeballWhiteSpinner from '../Imagenes/PokeballWhiteSpinner.gif'\r\n\r\nimport './Home.css';\r\n\r\nexport default function Home(){\r\n    const dispatch = useDispatch();\r\n    const allPokemons = useSelector ((state) => state.pokemons); //40 de la api\r\n    const types = useSelector((state) => state.types);         //traigo el estado types con todos los tipos que me traje con el useEffect\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const cambiarEstado = () => {\r\n        setLoading(true);\r\n        setTimeout(() =>{\r\n            setLoading(false)\r\n        }, 3000)\r\n    }\r\n\r\n    //PAGINADO.\r\n    const [currentPage, setCurrentPage] = useState(1);                      //La Home abre en la primera página\r\n    const [pokemonsPerPage, setPokemonsPerPage] = useState(12);             //Quiero 12 pokemons por página\r\n    const [orden, setOrden] = useState(\"\");\r\n    const indexOfLastPokemon = currentPage * pokemonsPerPage   //12         //índice del último pokemon que tengo en la página\r\n    const indexOfFirstPokemon = indexOfLastPokemon - pokemonsPerPage //0    //índice del primer pokemon\r\n    const currentPokemons = allPokemons.slice(indexOfFirstPokemon, indexOfLastPokemon) //pokemons en mi home. Array del estado.\r\n\r\n    const paginado = (pageNumber) => {\r\n        setCurrentPage(pageNumber)      //setea la pag actual con el nº de página que le paso desde el componente Paginado\r\n    }\r\n\r\n\r\n    useEffect (() =>{                       //Manejo de ciclos de vida\r\n        if(!allPokemons[0]){             //mantengo los filtros cuando monto el componente\r\n            dispatch(getPokemons());        //cuando se monta el componente, me traigo todos los pokemons\r\n            dispatch(getTypes());           //cuando se monta el componente, me traigo todos los types    \r\n         }\r\n    }, [dispatch]);\r\n\r\n    function handleClick(e){            //Reset\r\n        e.preventDefault();             //preventDefault para que cuando recargue no se rompa todo.\r\n        dispatch(getPokemons())         // boton \"volver a cargar todos los pokemons\"\r\n    };\r\n\r\n    function handleFilterCreated(e){\r\n        dispatch(filterCreated(e.target.value)) //el value puede ser All/created/api    \r\n    }\r\n\r\n    function handleFilterType(e){\r\n        dispatch(filterType(e.target.value))   //el value será el tipo seleccionado en las opciones del filtro\r\n    }\r\n\r\n    function handleSort(e){\r\n        e.preventDefault();\r\n        dispatch(orderByName(e.target.value));  //el value puede ser asc/desc \r\n        setCurrentPage(1);                      //empiezo en la pagina 1\r\n        setOrden(`Ordenado ${e.target.value}`)\r\n    }\r\n    function handleAttackSort(e){\r\n        e.preventDefault();\r\n        dispatch(orderByAttack(e.target.value)); //el value puede ser asc/desc\r\n        setCurrentPage(1);\r\n        setOrden(`Ordenado ${e.target.value}`)\r\n\r\n    }\r\n\r\n    return (                                            //Renderizado del Componente\r\n        <div className='prueba'>\r\n            <div className='white'>\r\n              <div className='first-navbar'>  \r\n                <h1 className='titulo'>POKEMON WEB</h1>\r\n                <div className='titulo-resp'>\r\n                    <h1 clasName='titulo'>POKEMON</h1>\r\n                    <h1 clasName='titulo'>WEB</h1>\r\n                </div>\r\n                <Link to='/pokemon'><button className='crear'>CREATE</button></Link>\r\n              </div>  \r\n                <SearchBar/>                         \r\n\r\n            </div>\r\n            <div>\r\n                \r\n            </div>\r\n            <div>\r\n              <div className='filt-bar'>     \r\n                <select className='filter' value='default' onChange={e => handleSort(e)}>\r\n                    <option value='default' disabled hidden>NAME</option>\r\n                    <option value='asc'>A → Z</option>\r\n                    <option value='Desc'>Z → A</option>\r\n                </select>\r\n                <select className='filter' value='default' onChange={e => handleAttackSort(e)}>\r\n                    <option value='default' disabled hidden>ATTACK</option>\r\n                    <option value='max'>+ ATTACK</option>\r\n                    <option value='min'>- ATTACK</option>\r\n                </select>\r\n                <button className='reset' onClick={(e) => {handleClick(e); cambiarEstado()}}>\r\n                    RESET\r\n                </button>\r\n                {loading && <img className='buscar-gif' src={PokeballWhiteSpinner}></img> }\r\n                <select className='filter' value='default' onChange={e => handleFilterCreated(e)}>\r\n                    <option value='default' disabled hidden>ORIGIN</option>\r\n                    <option value='All'>All</option>\r\n                    <option value='created'>CREATED</option>\r\n                    <option value='api'>API</option> \r\n                </select>\r\n                <select className='filter' value='default' onChange={e => handleFilterType(e)}>             {/* cuando seleccino un tipo, se ejecuta el handle */}\r\n                    <option value='default' disabled hidden>TYPE</option>\r\n                    {types.map((t) => (                                 //recorro el estado types y por cada tipo ...\r\n                            <option value={t.name} key={t.name}>{t.name.toUpperCase()}</option>   //renderizo un option con el nombre de cada uno en el select\r\n                        ))}\r\n                </select>\r\n            </div>\r\n        \r\n                <div>\r\n                    <Paginado \r\n                        pokemonsPerPage = {pokemonsPerPage}     //le paso al comp paginado el estado pPP\r\n                        allPokemons = {allPokemons.length}      //le paso el numero de la cantidad de elementos del array allPokemons\r\n                        paginado = {paginado}                   //le paso la func paginado()\r\n                    />\r\n                </div>\r\n                <div className='orden'>\r\n                    {currentPokemons.length > 0 ?       //si el estado pokemons tiene algo...\r\n                    currentPokemons?.map((p) => {       //recorro todos los pokemons\r\n                         return (\r\n                            <div>\r\n                                <Link to={\"/home/\" + p.id} className='link'>\r\n                                    <div>\r\n                                        <Card                   //le paso al comp card:\r\n                                            name={p.name} \r\n                                            image={p.img ? p.img : p.image} \r\n                                            types={p.createdInDb ? p.types.map(p => p.name + \" \") : p.type.map(p => p + \" \" )} \r\n                                            // attack={p.attack}\r\n                                            key={p.id}\r\n                                        />  {/*Props de getApiInfo() en api/routes/index.js*/}\r\n                                    </div>\r\n                                </Link>\r\n                            </div>\r\n                            );\r\n                        }) :    <div className='loading-pikachu'>    {/*sino, renderizo loading */}\r\n                                    <img src={PikachuGif} width='350px' height='350px'/>  \r\n                                </div> }\r\n                            \r\n                </div>\r\n                <div className='paginado-resp'>\r\n                    <Paginado \r\n                        pokemonsPerPage = {pokemonsPerPage}     //le paso al comp paginado el estado pPP\r\n                        allPokemons = {allPokemons.length}      //le paso el numero de la cantidad de elementos del array allPokemons\r\n                        paginado = {paginado}                   //le paso la func paginado()\r\n                    />\r\n                </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//---------------------------------------------------------------------------------------------------------------\r\n\r\n//DELETE BUTTON\r\n\r\n// function handleDelete(e){\r\n    // dispatch(deletePokemon(e.target.value))   //el value será el id\r\n    // }\r\n\r\n{/* {p.createdInDb && <button type='button' value={p.id} onClick={e => handleDelete(e)}>X</button>} */}\r\n","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\Card.jsx",[],"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\actions\\index.js",[],"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\Paginado.jsx",[],"D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\SearchBar.jsx",["70","71"],"import React from 'react';\r\nimport { useState,  } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getNamePokemons } from '../actions';\r\nimport './SearchBar.css'\r\n\r\nexport default function SearchBar() {\r\n    const dispatch = useDispatch();\r\n    const [name, setName] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const cambiarEstado = () => {\r\n        setLoading(true);\r\n        setTimeout(() =>{\r\n            setLoading(false)\r\n        }, 3000)\r\n    }\r\n\r\n    \r\n\r\n    function handleInputChange(e){\r\n        e.preventDefault();\r\n        setName(e.target.value)\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        if(!name){\r\n            return('no se encontró')\r\n        }\r\n        dispatch(getNamePokemons(name))\r\n    }\r\n\r\n    console.log('NAME: ', name)\r\n\r\n    return(\r\n        <div className='search-div'>\r\n            <input className='input-buscar' type = 'text' placeholder = 'search...' onChange={(e) => handleInputChange(e)} />\r\n            <button className='buscar' type = 'submit' onClick={(e) => { handleSubmit(e); cambiarEstado()}}>GO</button>\r\n            {loading && <img className='buscar-gif' src='https://cdn.dribbble.com/users/621155/screenshots/2835314/simple_pokeball.gif'></img> }\r\n            \r\n                \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n1º guardo en name lo que el usuario escribe en el input a traves setName().\r\n2º cuando el usuario haga click en Buscar le paso al back la acción getNamePokemons() con name como arg.\r\n*/\r\n\r\n\r\n\r\n  \r\n  ","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\PokemonCreate.jsx",["72","73","74"],"import React, {useState, useEffect} from \"react\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {postPokemon, getTypes} from '../actions/index';\r\nimport './PokemonCreate.css'\r\nimport swal from'sweetalert2';\r\n\r\n\r\n//FUNCION VALIDADORA\r\nfunction validate(input){                            //va a recibir el estado input con los cambios detectados por los handlers\r\n    let errors = {};                                 //objeto que guarda todos los errores\r\n    if(!input.name){                                //si no hay un nombre...\r\n        errors.name = 'a name is required';      //al obj errors le agrego una prop name: 'se requiere un nombre'\r\n    }else if(!/^[A-z]+$/.test(input.name)){          //expresion regular solo acepta letras\r\n        errors.name = 'only letters allowed'\r\n    }else if(!input.img){\r\n        errors.img = 'an image is required';\r\n    }else if(!/^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$/.test(input.img)){ \r\n        errors.img = 'only URL directions allowed'\r\n    }else if(input.health < 1 || input.health > 200){\r\n        errors.health = 'must be a value between 1 and 200'\r\n    }else if(!/^[0-9]+$/.test(input.health)){ \r\n        errors.health = 'only numbers allowed'\r\n    }else if(input.attack < 1 || input.attack > 200){\r\n        errors.attack = 'must be a value between 1 and 200'\r\n    }else if(!/^[0-9]+$/.test(input.attack)){ \r\n        errors.attack = 'only numbers allowed'\r\n    }else if(input.defense < 1 || input.defense > 200){\r\n        errors.defense = 'must be a value between 1 and 200'\r\n    }else if(!/^[0-9]+$/.test(input.defense)){ \r\n        errors.defense = 'only numbers allowed'\r\n    }else if(input.speed < 1 || input.speed > 200){\r\n        errors.speed = 'must be a value between 1 and 200'\r\n    }else if(!/^[0-9]+$/.test(input.speed)){ \r\n        errors.speed = 'only numbers allowed'\r\n    }else if(input.height < 1 || input.height > 200){\r\n        errors.height = 'must be a value between 1 and 200'\r\n    }else if(!/^[0-9]+$/.test(input.height)){ \r\n        errors.height = 'only numbers allowed'\r\n    }else if(input.weight < 1 || input.weight > 200){\r\n        errors.weight = 'must be a value between 1 and 200'\r\n    }else if(!/^[0-9]+$/.test(input.weight)){ \r\n        errors.weight = 'only numbers allowed'\r\n    }else if(input.type.length < 1){\r\n        errors.type = 'select at least 1 type'\r\n    }\r\n        return errors;      //se retorna el obj errors con la prop y el string correspondiente. let errors = {name: 'se requiere un nombre'}\r\n}\r\n\r\nexport default function PokemonCreate(){\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const types = useSelector((state) => state.types); //guardo en types el estado con todos los tipos\r\n    const [errors, setErrors] = useState({e:''});      //creo el estado errors\r\n    const [input, setInput] = useState({               //creo el estado input que es como viene el formulario por default\r\n        name:\"\",\r\n        img:\"\",\r\n        health: 0,\r\n        attack: 0,\r\n        defense: 0,\r\n        speed: 0,\r\n        height: 0,\r\n        weight: 0,\r\n        type: [],\r\n    })\r\n\r\n    function handleChange(e){                       //recibe un evento, que es un cambio en el input\r\n        setInput({                                  //setInput es la funcion que sabe como modificar el estado input\r\n            ...input,\r\n            [e.target.name] : e.target.value,       //a la prop que coincida con el name(name, img, speed...) le asigna el valor que se escribió en el input   \r\n        })\r\n        setErrors(validate({                        //cuando haya un cambio, setea el estado errors con el resultado de pasarle a la funcion validate el input modificado. el estado errors podria ser errors = {name: 'se requiere un nombre'} por ej. \r\n            ...input,\r\n            [e.target.name] : e.target.value,\r\n        }));\r\n    }\r\n\r\n    function handleSelect(e){                       //recibe el tipo que se seleccionó en el selector\r\n        if(!input.type.includes(e.target.value)){   //evita que se repitan los tipos\r\n            setInput({\r\n                ...input,\r\n                type: [...input.type, e.target.value],  //al array de la prop type le añade el nuevo tipo que se seleccionó\r\n            })\r\n        }\r\n        setErrors(validate({                        \r\n            ...input,\r\n            type: [...input.type, e.target.value]\r\n        }))\r\n        \r\n    }\r\n\r\n    function handleSubmit(e){                       //recibe toda la info del formulario\r\n        e.preventDefault();\r\n        dispatch(postPokemon(input))                //crea un pokemon con la info que se fue guardando en el estado input\r\n        //alert(\"Pokémon Creado Con Éxito!\")\r\n        swal.fire({\r\n            position: 'top-end',\r\n            icon: 'success',\r\n            title: 'Pokémon Created!',\r\n            showConfirmButton: false,\r\n            timer: 2000,\r\n          })\r\n        setInput({                                  //resetea el estado input a su estado original\r\n            name:\"\",\r\n            img:\"\",\r\n            health: 0,\r\n            attack: 0,\r\n            defense: 0,\r\n            speed: 0,\r\n            height: 0,\r\n            weight: 0,\r\n            type: [],\r\n\r\n        });\r\n        history.push('/home');      //llevame al home cuando se cree el pokemon\r\n    }\r\n\r\n    function handleDelete(el){      //recibe un evento, que es el click en la X de un tipo\r\n        setInput({\r\n            ...input,\r\n            type: input.type.filter(t => t !== el)   //se filtra el array de la prop type, dejando pasar solo aquellos tipos que no coinciden con el clickeado \r\n        })\r\n        \r\n    }\r\n    \r\n    useEffect(() => {\r\n        dispatch(getTypes());       //al montarse el comp me trae todos los tipos\r\n    }, [dispatch]);\r\n    \r\n    return(\r\n        <div className=\"back-create\">\r\n            <Link to='/home'><button className=\"volver-create\">BACK</button></Link>\r\n            <h1 className=\"title-create\">CREATE  YOUR  POKÉMON</h1>\r\n            <form className=\"form\" onSubmit={(e) => handleSubmit(e)}>    {/*al clickear el boton de L188 se ejecuta handleSubmit*/}\r\n                <div className=\"formulario\">\r\n                    <label>Name: </label>\r\n                    <input type='text' value={input.name} name='name' maxLength=\"22\" placeholder=\"name...\" onChange={(e) => handleChange(e)}/> {/*Cuando hay un cambio en el input Nombre se ejecuta handleChange */}\r\n                    {errors.name && <p className=\"error\">{errors.name}</p>}    {/*si el estado errors tiene la prop name, renderizo un parrafo con el string de ésta prop */}\r\n                </div>\r\n                <div className=\"formulario\">\r\n                    <label>Image(URL): </label>\r\n                    <input type='text' value={input.img} name='img' placeholder=\"image...\" onChange={(e) => handleChange(e)}/>\r\n                    {errors.img && <p className=\"error\">{errors.img}</p>}\r\n                </div>\r\n                <div className=\"formulario\">\r\n                    <label>HP: </label>\r\n                    <input type='number' value={input.health} name='health' onChange={(e) => handleChange(e)}/>\r\n                    {errors.health && <p className=\"error\">{errors.health}</p>}\r\n                </div>\r\n                <div className=\"formulario\">\r\n                    <label>Attack: </label>\r\n                    <input type='number' value={input.attack} name='attack' onChange={(e) => handleChange(e)}/>\r\n                    {errors.attack && <p className=\"error\">{errors.attack}</p>}\r\n                </div>\r\n                <div className=\"formulario\">\r\n                    <label>Defense: </label>\r\n                    <input type='number' value={input.defense} name='defense' onChange={(e) => handleChange(e)}/>\r\n                    {errors.defense && <p className=\"error\">{errors.defense}</p>}\r\n                </div>\r\n                <div className=\"formulario\">\r\n                    <label>Speed: </label>\r\n                    <input type='number' value={input.speed} name='speed' onChange={(e) => handleChange(e)}/>\r\n                    {errors.speed && <p className=\"error\">{errors.speed}</p>}\r\n                </div>\r\n                <div className=\"formulario\">\r\n                    <label>Height: </label>\r\n                    <input type='number' value={input.height} name='height' onChange={(e) => handleChange(e)}/>\r\n                    {errors.height && <p className=\"error\">{errors.height}</p>}\r\n                </div>\r\n                <div className=\"formulario\">\r\n                    <label>Weight: </label>\r\n                    <input type='number' value={input.weight} name='weight' onChange={(e) => handleChange(e)}/>\r\n                    {errors.weight && <p className=\"error\">{errors.weight}</p>}\r\n                </div>\r\n                \r\n                <div className=\"formulario\">\r\n                    { input.type.length < 2 ?     \r\n                        <select value='default' onChange={(e) => handleSelect(e)}>     {/*Cuando se selecciona una opcion se ejecuta handleSelect con esa selección*/}\r\n                            <option value='default' disabled hidden>--type--</option>\r\n                            {types.map((t) => (                         //RECORRO EL ARRAY types PARA RENDERIZARLO\r\n                            <option value={t.name}>{t.name}</option>    //renderizo los nombres de tipos en el selector\r\n                            ))} \r\n                        </select> \r\n                        : <p className=\"error\">cannot have more than 2 types</p>}\r\n\r\n                </div>\r\n                    {errors.type && <p className=\"error\">{errors.type}</p>}   {/*si el estado errors tiene la prop type, renderizo un parrafo con el string de ésta prop */}\r\n                \r\n                <div className=\"type\">\r\n                    {input.type.map(el =>                               //Recorro el array de la prop type del input           \r\n                         <div className=\"type-content\">       {/*renderizo el tipo que ya fue seleccionado mas un boton X*/}\r\n                            <p>{el}</p>                                         \r\n                            <button className=\"delete-type\" type='button' onClick={() => handleDelete(el)}>x</button>     {/*cuando clickeo en X se ejecuta handleDelete*/}\r\n                         </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"create-button\">\r\n                    {Object.keys(errors).length || !input.type.length ? \r\n                        <button className=\"not-ok\" type='submit' disabled>please complete the form</button> : \r\n                        <button className=\"ok\" type='submit'>CREATE</button> }               {/*cuando clickeo el boton (que es tipo submit), se 'envia' el formulario L125  */}\r\n                </div>\r\n                \r\n            </form>\r\n            {console.log(input.type)}\r\n        </div>\r\n    )\r\n     \r\n}\r\n","D:\\Tomas\\HENRY\\PI\\PI-Pokemon-main\\client\\src\\components\\PokemonDetail.jsx",["75"],"import React from \"react\";\r\nimport {useParams, useHistory} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { getDetail, cleanDetail } from \"../actions/index\";\r\nimport { useEffect } from \"react\";\r\nimport { BsSpeedometer } from \"react-icons/bs\";\r\nimport { GiCrossedSwords, GiCheckedShield, GiHearts} from \"react-icons/gi\";\r\nimport { AiOutlineColumnHeight, AiOutlineNumber } from \"react-icons/ai\";\r\nimport { FaBalanceScaleLeft } from \"react-icons/fa\";\r\nimport { MdCatchingPokemon } from \"react-icons/md\";\r\nimport './PokemonDetail.css'\r\nimport pokeballEye from '../Imagenes/pokeballEye.gif'\r\n\r\nexport default function PokemonDetail(){\r\n    const dispatch = useDispatch();\r\n    const param = useParams();\r\n    const history = useHistory();\r\n    const myPokemon = useSelector ((state) => state.detail);  //guardo en myPokemon el estado detail:[] del reducer\r\n    \r\n   \r\n\r\n    useEffect(() => {\r\n        dispatch(getDetail(param.id));                      //al montarse el componente despacho la accion getDetail con el id que capturo del URL dinamico\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dispatch])\r\n\r\n    function handleBack(e){\r\n        e.preventDefault();\r\n        dispatch(cleanDetail());                        //al clickear en volver, reseteo el estado detail\r\n        history.push('/home');\r\n    }\r\n\r\n    return(\r\n        <div className=\"background-detail\">\r\n\r\n        <div >\r\n            {\r\n                myPokemon.length > 0 ?               //si el estado detail no está vacio, renderizo esto:\r\n                <div className=\"details\">\r\n                    <h1 className=\"name-detail\">{myPokemon[0].name.toUpperCase()}</h1>\r\n                    <img src={myPokemon[0].img ? myPokemon[0].img :myPokemon[0].image} alt=\"img not found\" width=\"250px\" height=\"250px\" className=\"detail-img\"/>\r\n                    <div className=\"stats\">\r\n                    <h2><MdCatchingPokemon/> TYPE: {myPokemon[0].createdInDb? myPokemon[0].types.map(p => p.name + \" \") : myPokemon[0].type + \" \"}</h2>\r\n                    <h2><GiHearts/> HP: {myPokemon[0].health}</h2>\r\n                    <h2><GiCrossedSwords/> ATTACK: {myPokemon[0].attack}</h2>\r\n                    <h2><GiCheckedShield/> DEFENSE: {myPokemon[0].defense}</h2>\r\n                    <h2><BsSpeedometer/> SPEED: {myPokemon[0].speed}</h2>\r\n                    <h2><AiOutlineColumnHeight/> HEIGHT: {myPokemon[0].height}</h2>\r\n                    <h2><FaBalanceScaleLeft/> WEIGHT: {myPokemon[0].weight}</h2>\r\n                    <h2><AiOutlineNumber/> ID: {myPokemon[0].id}</h2>                    \r\n                    </div>\r\n                </div> : <img src={pokeballEye} className=\"pokeball-gif\"/>      //si está vacio, renderizo esto\r\n            }\r\n            \r\n                <button className=\"volver\" onClick={ e => handleBack(e)}>BACK</button>    {/*al clickear en volver ejecuto handleBack() */}\r\n        </div>\r\n        </div>\r\n    )\r\n\r\n}",{"ruleId":"76","severity":1,"message":"77","line":10,"column":8,"nodeType":"78","messageId":"79","endLine":10,"endColumn":13},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":33,"column":17,"nodeType":"86","endLine":33,"endColumn":45},{"ruleId":"76","severity":1,"message":"87","line":29,"column":29,"nodeType":"78","messageId":"79","endLine":29,"endColumn":47},{"ruleId":"76","severity":1,"message":"88","line":30,"column":12,"nodeType":"78","messageId":"79","endLine":30,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":45,"column":8,"nodeType":"91","endLine":45,"endColumn":18,"suggestions":"92"},{"ruleId":"84","severity":1,"message":"85","line":106,"column":29,"nodeType":"86","endLine":106,"endColumn":84},{"ruleId":"84","severity":1,"message":"85","line":147,"column":37,"nodeType":"86","endLine":147,"endColumn":89},{"ruleId":"93","severity":1,"message":"94","line":187,"column":1,"nodeType":"95","messageId":"96","endLine":187,"endColumn":104},{"ruleId":"76","severity":1,"message":"97","line":3,"column":23,"nodeType":"78","messageId":"79","endLine":3,"endColumn":34},{"ruleId":"84","severity":1,"message":"85","line":40,"column":25,"nodeType":"86","endLine":40,"endColumn":137},{"ruleId":"98","severity":1,"message":"99","line":18,"column":54,"nodeType":"100","messageId":"101","endLine":18,"endColumn":55,"suggestions":"102"},{"ruleId":"98","severity":1,"message":"99","line":18,"column":109,"nodeType":"100","messageId":"101","endLine":18,"endColumn":110,"suggestions":"103"},{"ruleId":"98","severity":1,"message":"104","line":18,"column":116,"nodeType":"100","messageId":"101","endLine":18,"endColumn":117,"suggestions":"105"},{"ruleId":"84","severity":1,"message":"85","line":52,"column":26,"nodeType":"86","endLine":52,"endColumn":75},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-native-reassign",["106"],"no-negated-in-lhs",["107"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setPokemonsPerPage' is assigned a value but never used.","'orden' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allPokemons'. Either include it or remove the dependency array.","ArrayExpression",["108"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useSelector' is defined but never used.","no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["109","110"],["111","112"],"Unnecessary escape character: \\/.",["113","114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"messageId":"117","fix":"118","desc":"119"},{"messageId":"120","fix":"121","desc":"122"},{"messageId":"117","fix":"123","desc":"119"},{"messageId":"120","fix":"124","desc":"122"},{"messageId":"117","fix":"125","desc":"119"},{"messageId":"120","fix":"126","desc":"122"},"Update the dependencies array to be: [allPokemons, dispatch]",{"range":"127","text":"128"},"removeEscape",{"range":"129","text":"130"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"131","text":"132"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"133","text":"130"},{"range":"134","text":"132"},{"range":"135","text":"130"},{"range":"136","text":"132"},[2246,2256],"[allPokemons, dispatch]",[982,983],"",[982,982],"\\",[1037,1038],[1037,1037],[1044,1045],[1044,1044]]